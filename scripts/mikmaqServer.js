/**
 * The purpose of this file is to create an Express framework server that has 2 endpoints:
 *           one for a GET request and one for a POST request
 * This file contains pseudo-code where needed.
 *
 * Adapted from Lab 10 slides, authored by Terry Goldsmith.
 *
 * Author: Suyog Chitrakar - Initial server creation
 *         Raish Raj Joshi - Updated code to adapt with the mikmaqGame.js file, documentation
 *         Swaraj Shrestha - Documentation
 */

// starting the Express framework and make it accessible via the reference
const express = require("express");

// defining the top level Express function
const server = express();

// setting the port where the server listens for clients
const port = 3056;

// initialize the counts for incorrect and correct answers to 0
let incorrectAnswer = 0;
let correctAnswer = 0;

// enable the server to recognize JSON format
server.use(express.json());

// enable incoming "name":"value" pairs to be any type including arrays
server.use(express.urlencoded({ extended: true }));

/**
 * The purpose of this function is to execute the instructions
 * necessary: to allow a request from any origin to access this site's content;
 * allow only GET and POST requests; and to only accept requests that include
 * "Content-Type".
 *
 *  Author: Terry Goldsmith - Wrote initial function
 *          Suyog Chitrakar - Adapted function for the project
 *
 * @param {object} req request object generated by the HTTP event
 * @param {object} res response object generated by the HTTP event
 * @param {Function} next predefined function required to be run after your middleware has run
 *
*/
const allowCrossDomain = function (req, res, next) {
  // allow any origin
  res.header("Access-Control-Allow-Origin", "*");
  // allow any method
  res.header("Access-Control-Allow-Methods", "GET,POST");
  // accept only headers with Content-Type included
  res.header("Access-Control-Allow-Headers", "Content-Type");
  // since this middleware function does not terminate the request/response cycle
  // the next() function must be called to continue to the succeeding middleware function
  next();
};

// set domain characteristics defined above
server.use(allowCrossDomain);

/*
  Preset the anonymous function to be the function called whenever a POST
  request is received by this server at the endpoint.
  http://ugdev.cs.smu.ca:3056/myPost
*/

/** 
 * The purpose of this function is to respond to a POST request with relative
 * endpoint: /myPost
 *
 * req - request object generated by the HTTP event
 * res - response object generated by the HTTP event
 *
 * Adapted from @Terry_Goldsmith's code for Lab10.
 *
 * Author: Suyog Chitrakar - Wrote initial function
 *         Raish Raj Joshi - Updated code with variables for correct functionality
 * 
 */
server.post("/myPost", function (req, res) {
  // give the appropriate data from the requested object to the appropriate variables
  incorrectAnswer = req.body.inAnswer;
  correctAnswer = req.body.cAnswer;

  // log the "value" in the "name":"value" pair received
  console.log("req.body.inAnswer:" + req.body.inAnswer);
  console.log("req.body.cAnswer:" + req.body.cAnswer);

  // define a new JSON object to be returned
  let objects = { status: "Done" };

  // access the response object via the reference
  // set the associated status to success
  // place your new JSON object into the response object
  // return the response object terminating the
  //     request/response cycle so next() is not required
  return res.status(200).send(objects);
});

/*
  Preset the anonymous function to be the function called whenever a GET
  request is received by this server at the endpoint
  http://ugdev.cs.smu.ca:3056/myGet
*/

/**
 * The purpose of this function is to respond to a GET request with relative
 * endpoint: /myGet
 *
 * req - request object generated by the HTTP event
 * res - response object generated by the HTTP event
 *
 * Adapted from @Terry_Goldsmith's code for Lab10.
 *
 * Author: Suyog Chitrakar - Wrote intital function
 *         Raish Raj Joshi - Modified the objects and usage
 */
server.get("/myGet", function (req, res) {
  // define a new JSON object to be returned
  let objects = { inAnswer: incorrectAnswer, cAnswer: correctAnswer };

  // access the response object via the reference
  // set the associated status to success
  // place your new JSON object into the response object
  // return the response object terminating the
  //     request/response cycle so next() is not required
  return res.status(200).send(objects);
});

/*
  Preset the anonymous function to be the function called when the server
  starts listening on port 3056.
*/

/*
 * The purpose of this function is to produce a message on the Node.js console,
 * indicating the server has begun to listen for clients on a port.
 *
 * Adapted from @Terry_Goldsmith's code for Lab10.
 *
 * Author: Suyog Chitrakar - Wrote initial function
 */
server.listen(port, function () {
  console.log("Listening on port 3056");
});
